a.Типы данных Python

В Python есть несколько стандартных типов данных:

- Numbers (числа)
- Strings (строки)
- Lists (списки)
- Dictionaries (словари)
- Tuples (кортежи)
- Sets (множества)
- Boolean (логический тип данных)

Эти типы данных можно, в свою очередь, классифицировать по нескольким признакам:

- изменяемые (списки, словари и множества)
- неизменяемые (числа, строки и кортежи)
- упорядоченные (списки, кортежи, строки и словари)
- неупорядоченные (множества)

*----- Числа - numbers (int / float) -----*
С числами можно выполнять: 
- математические операции, 
- операции сравнения, 
- округления.
Для более сложных математических операций в Python есть модуль math.

*----- Строки - string -----*
Строки это последовательность символов, заключенная в кавычки.
Это неизменяемый упорядоченный тип данных.
Строки можно суммировать (конкатанация).
Строки можно умножать на число (получим строку n-раз)
Имеется возможно обращаться по индексу к символам (отчет идет с 0).
Имеется возможность делать срезы срок (указываем диапазон).
Имеется возможность получить длину строки (len).
Некоторые методы для обработки строк:
- uppercase (весь регистр заглавный)
- lowercase (весь регистр строчный)
- swapcase (инверсия регистров строки)
- capitalize (1 символ будет верхнего регистра)
- count (количество вхождений/повторений символа или строки)
- find (покажет позицию для 1 символа подстроки для первого совпадения)
- startwith (начинается строка с определенного символа - boolean) можно передавать несколько значений (кортеж)
- endwith (заканчивается строка с определенного символа - boolean) можно передавать несколько значений (кортеж)
- replace (замена последовательности на другую последовательность)
- strip (позволяет избавиться от специальных символов в начале и конце строки) по умолчанию убирает пробельные символы (\t\n\r\f\v)
- lstrip (убирает спец символы только слева строки)
- rstrip (убирает спец символы только справа строки)
- split (разбивает строку на части используя символ) возвращает список

*----- Список - list -----*
Это последовательность элементов, разделенных между собой запятой и заключенных в квадратные скобки.
Это изменяемый упорядоченный тип данных.
Имеется возможность обращаться к элементам списка по индексу.
Можно создавать список списков.
- reverse (инвертирует список в обратном порядке)
- len (количество элементов списка)
- sorted (сортировка списков)
- join (собирает список строк в строку, используя символ разделения)
- append (добавлет элемент в конце списка)
- extend (объединение списков) меняет 1 список, добавляя к нему другой
- pop (удаляет элемент, который соответствует номеру в списке) возвращает этот элемент. Без указания номера удаляется последний элемент.
- remove (удаляет указанный эллемент не возвращая его)
- index (используется для проверки порядкового номера элемента в списке)
- insert (позволяет вставить элемент в указанном месте)
- sort (сортирует список на месте, меняя список)

*----- Словари - dictionary -----*
Это изменяемый упорядоченный тип данных.
- данные в словаре - это пары ключ: значение
- доступ к значениям осуществляется по ключу, а не по номеру, как в списках
- данные в словаре упорядочены по порядку добавления элементов
- так как словари изменяемы, то элементы словаря можно менять, добавлять, удалять
ключ должен быть объектом неизменяемого типа: число, строка, кортеж
- значение может быть данными любого типа
- sorted (возвращает новый отсортированный словарь по ключу)
- clear (очищает словарь)
- copy (создает полную копию словаря)
- get (запрашивает ключ словаря) если его нет - вернется None
- setdefault (ищет ключ словаря) если его нет - создаст ключ со значением None
- keys (выводит ключи словаря)
- values (выводит значения ключей словаря)
- items (выводит пару ключ-значение словаря)
- del (удаляет ключ-значение словаря)
- update (позволяет добавлять значения словаря в другой словарь)

Конструктор позволяет создать словарь несколькими способами:
- r1 = dict(model='4451', ios='15.4')
- r1 = dict([('model', '4451'), ('ios', '15.4')])
- d_keys = ['hostname', 'location', 'vendor', 'model', 'ios', 'ip']
  r1 = dict.fromkeys(d_keys)

*----- Кортежи - tuples -----*
Это последовательность элементов, которые разделены между собой запятой и заключены в скобки.
Это неизменяемый упорядоченный тип данных.
- к объектам в кортеже можно обращаться по порядковому номеру

*----- Множества - sets -----*
Это изменяемый неупорядоченный тип данных. 
- в множестве всегда содержатся только уникальные элементы
- это последовательность элементов, которые разделены между собой запятой и заключены в фигурные скобки
- с помощью множества можно легко убрать повторяющиеся элементы
- add (добавляет элемент в мнежество)
- discard (удаляет элмент без генерации ошибки в случае его отстутствия)
- clear (отчищает множество)
- union (объединение множеств) - так же оператор |
- intersection (пересчечение множеств) - так же оператор &
- set() - создает множество

*----- Булевы значения - bool -----*
Булевы значения в Python это две константы True и False.
В Python истинными и ложными значениями считаются:
- истинное значение:
  - любое ненулевое число
  - любая непустая строка
  - любой непустой объект
- ложное значение:
  - 0
  - None
  - пустая строка
  - пустой объект
- bool (для проверки булевого значения)


b.Что такое изменяемые и неизменяемые типы
Объекты в питоне бывают двух значительно отличающихся сортов: 
- изменяемые (mutable)
- неизменяемые (immutable). 

Неизменяемыми являются: 
- целые и действительные числа (int, float)
- строки (str)
- последовательности байтов (бинарные данные, bytes)-
- кортежи, все элементы которых неизменяемы (tuple). 

Изменяемыми являются:
- списки (list)
- словари (dict)
- множества (set)

Неизменяемые объекты обладают замечательным свойством: они не могут измениться в результате работы программы. Если некоторая переменная «смотрит» на неизменяемый объект, то можно быть уверенным, что её значение не поменяется, если только ей не присвоить ссылку на другой объект. 
Например, в результате выполнения кода a = 1 в переменной a хранится ссылка на объект Целое-число-1, и что бы не происходило с другими переменными, a будет всегда равно 1.

Изменяемые объекты не обладают таким постоянством. Они скорее напоминают контейнер для хранения: контейнер остаётся на месте, а вот содержимое может сильно измениться.


c.Примеры форматирования строк

- с ипользованием оператора % (является устаревшим методом)
Примеры:
1. name = 'Bob'
   print('Hello, %s' % name)
2. errno = 50159747054
   print('%x' % errno) # конвертирует в 16-ричное число
3. errno = 50159747054
   name = 'Bob'
   print('Hey %s, there is a 0x%x error!' % (name, errno)) # если надо вывести несколько значений
4. print(
    'Hey %(name)s, there is a 0x%(errno)x error!' % {
        "name": name, "errno": errno
    }
   ) # передача переменных сопоставлением со словарем, не нужно беспокоиться о порядке переменных

- использование format()
Примеры: 
1. print('Hello, {}'.format(name))
2. print(
    'Hey {name}, there is a 0x{errno:x} error!'.format(
        name=name, errno=errno
    )
   )

- форматированные строчные литералы, или “f-строки”
Примеры:
1. print(f'Hello, {name}!')
2. a = 5
   b = 10
   print(f'Five plus ten is {a + b} and not {2 * (a + b)}.') # поддерживается встроенная арифметика
3. print(f'Hey {name}, there's a {errno:#x} error!')

- Шаблонные строки (Стандартная библиотека Template Strings)
Примеры:
1. from string import Template
   t = Template('Hey, $name!')
   print(t.substitute(name=name))
Данный способ нужно использовать когда вы обрабатываете форматированные строки, созданные пользователями вашей программы. 


d.Отличие кортежа от списка
Кортеж - это список, который нельзя изменить. 
То есть, в кортеже есть только права на чтение. 
Это может быть защитой от случайных изменений.


e.Что делает класс type
Возвращает тип объекта и является собственным метаклассом языка Python.

- синтаксис:
1. type(object)
2. type(name, bases, dict)

- параметры:
1. object - объект, тип которого определяется
2. name - имя для создаваемого типа
3. bases - кортеж с родительскими классами
4. dict - словарь, будет являться пространством имён для тела класса

- возвращаемое значение:
1. тип объекта, при вызове с одним аргументом,
2. объект нового типа при вызове класса с тремя аргументами.

Класс type() с одним аргументом object возвращает тип объекта. 
Возвращаемое значение - это как правило, тот же объект, что и возвращаемый object.__class__.

Класс type() с тремя аргументами вернет объект нового типа. 
Это по сути динамическая форма инструкции class, ее еще называют метакласс.
Другими словами класс type(), вызванный с тремя аргументами на самом деле является метаклассом! 
Класс type() это метакласс, который Python внутренне использует для создания всех классов.

Все, с чем имеем дело в Python, является объектом. 
Сюда входят функции и классы целые числа, строки и т.д. 
Все они объекты. И все они созданы из класса.

Понятия класс и тип по сути являются синонимами. 
Пользовательские типы данных могут быть сконструированы налету, во время исполнения, при помощи вызова type() с тремя аргументами или определены в коде, например при помощи инструкции class.

Важно понимать, что тип, как и другие сущности в Python, тоже является объектом.


f.Что такое оператор контекста with, описать примеры решаемых задач (edited)
В общем смысле, контекстный менеджмент - это система управления ресурсами. 
Она позволяет выполнять какие-то действия при начале работы с ресурсом и какие-то действия при окончании работы с ним автоматически. 
Кроме того, контекстный менеджер так же, как и обычная подпрограмма, ограничивает область видимости переменных, инициированных внутри контекстного менеджера. 
Классический случай - операции открытия файла.

В целом менеджер контекста – это класс, в котором реализованы два магических метода:
1. __enter__()
2. __exit__()

Решаемые задачи:
- чтение запись в файлы
- обращение по soccet
- обращение к БД


Литерал - это выражение, которое создает объект.