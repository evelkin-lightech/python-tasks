В Python выделяют четыре области видимости для переменных:

- local
    Эту область видимости имеют переменные, которые создаются и используются
    внутри функций.

    def test(a):
        x = 2
        return x + a

    print(test(4)) # получим 6
    print(x) # при попытке обратиться к x оплучаем ошибку

- enclosing
    Суть данной области видимости в том, что внутри функции могут быть
    вложенные функции и локальные переменные, так вот локальная переменная
    функции для ее вложенной функции находится в enclosing области видимости.

    def test(a):
        x = 2

        def test_print():
            print(f'x = {x}')
            return x + a

        return test_print()

    test(4) # выведет 'x = 2' и следующей строкой результат => 6
    В данном случае переменная x имеет область видимости enclosing для
    функции test_print().

- global
    Переменные области видимости global – это глобальные переменные уровня
    модуля (модуль – это файл с расширением .py). Доступ к переменным, объявленные
    на этом уровне видимости можно получить откуда угодно внутри модуля.
    В случае, если мы импортируем модуль внутрь другого модуля, то для переменной
    уже не будет области видимости global.

- build-in
    Это уровень Python интерпретатора. В рамках этой области видимости
    находятся функции open, len и т.п., также туда входят исключения.
    Эти сущности доступны в любом модуле Python и не требуют предварительного
    импорта. Built-in – это максимально широкая область видимости.

Стоит упомянуть так же о таких понятиях (ключевых словах) как global и nonlocal.

Пример 1:
    N = 100

    def test(a):
        def test_print():
            N = 20 # создается новая переменная в области видимости функции
            return a + N

        return test_print

    f = test(10)
    f() # получим 30

Пример 2:
    N = 100

    def test(a):
        def test_print():
            global N
            N = 20 # преопределяем значение глобаьной переменной N
            return a + N

        return test_print

    f = test(10)
    f() # получим также 30, но при этом мы будем работать с глобальной переменной N
          преопределив ее значение на глобальном уровне

Пример 3:
    N = 100

    def test(a):
        N = 10
        def test_print():
            nonlocal N
            N = 20
            return a + N

        test_print()
        print(N) # здесь уже будет переопределнное значние N = 20
        return test_print

    f = test(10)
    f() # получим 30, но при этом мы будем работать с глобальной переменной N
          преопределив ее значение на глобальном уровне

Ключевое слово nonlocal мы можем использовать только в том пространстве имен,
которое само ссылается на лольканое пространство имен.
