В Python всё является объектом.

Функции — это объекты первого класса.

Объектами первого класса в контексте конкретного языка программирования
называются элементы, с которыми можно делать всё то же, что и с любым другим
объектом: передавать как параметр, возвращать из функции и присваивать переменной.

Мы можем хранить функции в переменных:
    a = test()

Определять функции внутри других функций:
def wrapper_function():
    def hello_world():
        print('Hello world!')

    hello_world()

wrapper_function()

Передавать функции в качестве аргументов и возвращать их из других функций:
    def test():
        return 'Hello'

    def result(test):
        print(f'{test} - в качестве входных параметров')
        test()
        return test

В Python функции можно передавать и использовать в качестве аргументов,
как и любой другой объект.

Декоратор — это функция, которая позволяет обернуть другую функцию
для расширения её функциональности без непосредственного изменения её кода.

В Python декораторы используются, в основном, для декорирования функций
(или методов).

Пример:
    def decorator_function(func):
        def wrapper():
            print('Функция-обёртка!')
            print(f'Оборачиваемая функция: {func}')
            print('Выполняем обёрнутую функцию...')
            func()
            print('Выходим из обёртки')
        return wrapper
decorator_function является функцией-декоратором. Внутри decorator_function()
мы определили другую функцию, обёртку, которая обёртывает
функцию-аргумент и затем изменяет её поведение. Декоратор возвращает эту обёртку.

Пример:
    @decorator_function
    def hello_world():
        print('Hello World!')

Выражение @decorator_function вызывает decorator_function()
с hello_world в качестве аргумента и присваивает имени hello_world
возвращаемую функцию.

Декораторами пользуются, помещая их имя со знаком @ перед определением функции,
а не вызывая их.

Декорировать можно и классы:
    @timer
    class MyClass:
        def complex_calculation(self):
            time.sleep(1)
            return 42

    my_obj = MyClass()
    my_obj.complex_calculation()

При декорировании класса методы этого класса не подвергаются автоматическому
декорированию. Проще говоря — использование обычного декоратора для
декорирования обычного класса приводит лишь к декорированию конструктора
(метод __init__) этого класса.
