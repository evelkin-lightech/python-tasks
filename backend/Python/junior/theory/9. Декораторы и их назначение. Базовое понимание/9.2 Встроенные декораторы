@property
    Декоратор @property облегчает создание свойств в классах Python.
    Свойства выглядят как обычные атрибуты (поля) класса, но при их чтении
    вызывается геттер (getter), при записи – сеттер (setter), а при удалении –
    делитер (deleter).

    Декоратор @property возвращает объект-дескриптор.

    @property встроен и виден без import

@staticmethod и @classmethod
    Декораторы @staticmethod и @classmethod как раз делают метод статическим
    или классовым.

    Эти декораторы встроены и видны без import.

    Статический метод – это способ поместить функцию в класс, если она
    логически относится к этому классу. Статический метод ничего не знает
    о классе, из которого его вызвали.

    Классовый метод напротив знает, из какого класса его вызывают.
    Он принимает неявный первый аргумент (обычно cls),
    который содержит вызывающий класс. Классовые методы прекрасно подходят,
    когда нужно учесть иерархию наследования.

@contextmanager
    Этот декоратор позволяет получить из генератора – контекст менеджер.

    Находится в стандартном модуле contextlib.

    Пример: открытие файла.

@asynccontextmanager
    Асинхронная версия декоратора @contextmanager.

@lru_cache
    Запоминает результаты функции для набора аргументов,
    при следующем вызове уже не выполняет функцию, а достает результат из кэша.
    Размер кэша регулируется. Часто используемые элементы остаются в кэше,
    редкие – вытесняются, если размер доходит до максимального.

    Находится в стандартном модуле functools.

@functools.wraps
    Декоратор @functools.wraps полезен при разработке других декораторов.
    Передает имя, документацию и прочую мета-информацию из декорируемой функции
    к ее обертке.

    Находится в стандартном модуле functools.

Декораторы активно задействованы в Django. Например, они позволяют налагать
условия на обработку запросов или дополнять запрос дополнительной логикой:
    @require_POST
    @login_required
    @transaction_atomic
    def some_view(request):
        ...