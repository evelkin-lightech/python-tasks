Необходимый минимум функциональности контекстного менеджера требует методов
__enter__ и __exit__.

- __enter__() возвращает требуемый ресурс;
- __exit __() ничего не возвращает, но выполняет освобождение ресурсов.

Создадим простой класс ContextManager для работы с файлами:
    class ContextManager():
        def __init__(self, file_name, method):
            print('init method called')
            self.file_obj = open(file_name, method)

        def __enter__(self):
            print('enter method called')
            return self.file_obj

        def __exit__(self, type, value, traceback):
            print('exit method called')
            self.file_obj.close()


    with ContextManager('test.txt', 'w') as f:
        print('with statement block')
        f.write('Hello')
Метод __exit__ принимает три аргумента. Они обязательны для любого метода
__exit__ класса контекстного менеджера.

Логика работы ContextManager:
    1. with сохраняет метод __exit__ класса ContextManager.
    2. Следует вызов метода __enter__ класса ContextManager.
    3. Метод __enter__ открывает файл и возвращает его.
    4. Дескриптор файла передается в f.
    5. Мы записываем информацию в файл при помощи .write().
    6. with вызывает сохраненный __exit__ метод.
    7. Метод __exit__ закрывает файл.

При возникновении исключения, Python передает тип, значение и обратную
трассировку исключения методу __exit__:
    1. Тип, значение и обратная трассировка ошибки передается в метод __exit__.
    2. Обработка исключения передается методу __exit__
    3. Если __exit__ возвращает True, то исключение было корректно обработано.
    4. При возврате любого другого значения with вызывает исключение.



