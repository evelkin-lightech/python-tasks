Рассмотрим пример:
    def func(a, x=[]):
        x.append(a)
        return x

У нас есть функция, которая принимает 2 аргумента, один из которых обозначен по
умолчанию как пустой список.

Если мы не будем явно передавать данной функции никакого списка, а лишь один
аргумент функции, мы получим совершенно другой список.

Пример:
    func(1, [3])
В этом случае наша функция занесет число 1 в список, а результатом вернется:
    [3, 1]

В случае, если мы в качестве аргумента передадим только 1 параметр, получим:
    func(1)
    [1]
Но это уже будет другой список - другая переменная.

В Python переменные хранятся в специально отвеенной области памяти. Имя перменной
ссылается на эту область памяти, позволяя использовать хранимое в ней значение.

Соответственно, когда мы в качестве аргумента передаем 1 параметр функции,
функция создает новый список и заносит туда передаваемое значение.
Новый список - новая переменная.

Для того чтобы убедиться в этом немного модифицируем код и проверим так ли это:
    def func(a, x=[]):
        x.append(a)
        print(x, id(x))

    y = [1, 2, 3]
    print(y, id(y)) => [1, 2, 3] 140197532122368

    func(4) => [4] 140197532122432
    func(3) => [4, 3] 140197532122432
    func(5, y) => [1, 2, 3, 5] 140197532122368

Как видно из примера, при передаче двух аргементов функции у нас не создается
новой области памяти, а используется значения переменной y, куда и добавляется
новая переменнная

Чтобы избавиться от этой проблемы в дальнейшем, необходимо немного модифицировать
функцию:
    def func(a, x=None):
        if x is None:
            x = []
    ...
Теперь наша функция будет работать с одной и той же ячейкой памяти - при передаче
1 аргумента будет создаваться новый список, область памяти будет высвобождаться
для нового записи новых значений:
    def func(a, x=None):
        if x is None:
            x = []
        x.append(a)
        print(x, id(x)) => [1, 2, 3, 5] 140170285923712


    y = [1, 2, 3] => [1, 2, 3] 140170285923712
    print(y, id(y))

    func(4) => [4] 140170285923648
    func(3) => [3] 140170285923648
    func(5, y)

С обозначением переменных по умолчанию (списков и словарей) нужно быть очень
осторожным и обозначать в качестве пустого списка x=[] не стоит, если, конечно,
нам не нужно такое поведение.