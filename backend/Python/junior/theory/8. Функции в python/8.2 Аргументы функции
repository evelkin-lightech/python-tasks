Функция может принимать произвольное количество аргументов или не
принимать их вовсе. Также распространены функции:
- с произвольным числом аргументов,
- с позиционными и именованными аргументами,
- с обязательными и необязательными аргументами.

Пример:
    def func(a, b, c=2):
        return a + b + c
Аргументы a и b являются обязательными аргументами функции.
Аргумент c является необязательным агрументом, так как задан по умолчанию.

Аргументы в данном случае мы можем передевать следующим образом:
    func(1,2,3)
    func(1,2)
    func(a=1, b=2, c=3)
    func(a=1, b=2)

Функция также может принимать переменное количество позиционных аргументов,
тогда перед именем ставится *:
    def func(*args):
        return args
args - это кортеж из всех переданных аргументов функции,
и с переменной можно работать также, как и с кортежем:
    func(1, 2, 3, 'abc')
Оператор * позволяет «распаковывать» объекты, внутри которых хранятся элементы.
Благодаря использованию * создается список позиционных аргументов на основе того,
что было передано функции при вызове.

Функция может принимать и произвольное число именованных аргументов,
тогда перед именем ставится **:
    def func(**kwargs):
        return kwargs
В переменной kwargs у нас хранится словарь, с которым мы можем делать все,
что нам заблагорассудится:
    func(a=1, b=2, c=3) => {'a': 1, 'c': 3, 'b': 2}
Оператор ** позволяет создать словарь, в котором содержатся именованные
аргументы, переданные функции при её вызове.


