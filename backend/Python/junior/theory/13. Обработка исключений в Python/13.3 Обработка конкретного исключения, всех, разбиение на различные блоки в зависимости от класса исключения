Обработка исключений нужна для того, чтобы приложение не завершалось
аварийно каждый раз, когда возникает исключение. Для этого блок кода,
в котором возможно появление исключительной ситуации необходимо поместить
во внутрь синтаксической конструкции try…except.

Рассмотрим простйший пример:
    print("start")
    try:
       val = int(input("input number: "))
       tmp = 10 / val
       print(tmp)
    except Exception as e:
       print("Error! " + str(e))
    print("stop")

Если бы инструкций try…except не было, то при выбросе любого из исключений
программа аварийно завершится.

Согласно документации по языку Python, описывающему ошибки и исключения,
оператор try работает следующим образом:

- Вначале выполняется код, находящийся между операторами try и except.
- Если в ходе его выполнения исключения не произошло, то код в блоке
  except пропускается, а код в блоке try выполняется весь до конца.
- Если исключение происходит, то выполнение в рамках блока try прерывается
  и выполняется код в блоке except. При этом для оператора except можно указать,
  какие исключения можно обрабатывать в нем. При возникновении исключения,
  ищется именно тот блок except, который может обработать данное исключение.
- Если среди except блоков нет подходящего для обработки исключения,
  то оно передается наружу из блока try. В случае, если обработчик исключения
  так и не будет найден, то исключение будет необработанным
  (unhandled exception) и программа аварийно остановится.

Для указания набора исключений, который должен обрабатывать данный блок except
их необходимо перечислить в скобках (круглых) через запятую после оператора except:
    ...
    except(ValueError, ZeroDivisionError):
    ...

Так же, можно обрабатывать исключения по отдельности:
    ...
    except ValueError:
    ...
    except ZeroDivisionError:
    ...

Существует возможность передать подробную информацию о произошедшем исключении
в код внутри блока except:
    ...
    except ValueError as ve:
        print(f'ValueError: {ve}'
    ...

Помимо конструкции try/except стоит упомянуть об операторе finally. Он служит
для выполнения определенного программного кода при выходе из блока try/except:
    ...
    try:
    ...
    except:
    ...
    finally:
    ...

Не зависимо от того, возникнет или нет во время выполнения кода в блоке try
исключение, код в блоке finally все равно будет выполнен.

Если необходимо выполнить какой-то программный код, в случае если в процессе
выполнения блока try не возникло исключений, то можно использовать оператор else:
    ...
    try:
    ...
    except:
    ...
    else:
    ...
