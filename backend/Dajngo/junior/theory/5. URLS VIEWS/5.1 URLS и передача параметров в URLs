Чтобы разработать URL-адреса для приложения, создается модуль Python,
неофициально называемый URLconf (конфигурация URL-адреса).
Этот модуль представляет собой чистый код Python и является отображением между
выражениями пути URL и функциями Python (вашими представлениями).

Когда пользователь запрашивает страницу сайта на Django,
система следует алгоритму, чтобы определить, какой код Python выполнить:
1. Django определяет используемый корневой модуль URLconf.
   Обычно это значение параметра ROOT_URLCONF, но если входящий объект
   HttpRequest имеет атрибут urlconf (установленный промежуточным программным
   обеспечением), его значение будет использоваться вместо параметра ROOT_URLCONF.
2. Django загружает этот модуль Python и ищет переменную urlpatterns.
   Это должна быть последовательность экземпляров django.urls.path()
   и/или django.urls.re_path().
3. Django проходит по каждому шаблону URL по порядку и останавливается на
   первом, который соответствует запрошенному URL, сопоставляя его с path_info.
4. Как только один из шаблонов URL совпадает, Django импортирует и вызывает
   заданное представление, которое является функцией Python (или представление
   на основе классов). Представлению передаются следующие аргументы:
   - Экземпляр HttpRequest.
   - Если сопоставленный шаблон URL не содержит именованных групп,
     то совпадения из регулярного выражения предоставляются как позиционные
     аргументы.
   - Ключевые аргументы состоят из любых именованных частей, совпадающих с
     указанным выражением пути, переопределенных любыми аргументами, указанными
     в необязательном аргументе kwargs для django.urls.path()
     или django.urls.re_path().
5. Если шаблон URL-адреса не совпадает или если на каком-либо этапе этого
   процесса возникает исключение, Django вызывает соответствующее представление
   обработки ошибок.

По умолчанию доступны следующие конвертеры пути:
- str - соответствует любой непустой строке, за исключением разделителя пути,
  '/'. Это значение по умолчанию, если преобразователь не включен в выражение.
- int - соответствует нулю или любому положительному целому числу.
  Возвращает int.
- slug - соответствует любой строке заголовка, состоящей из букв или цифр ASCII,
  а также символов дефиса и подчеркивания. Например, build-your-1st-django-site.
- uuid - соответствует форматированному UUID. Чтобы предотвратить сопоставление
  нескольких URL-адресов с одной и той же страницей, необходимо использовать
  дефисы, а буквы должны быть строчными.
  Например, 075194d3-6885-417e-a8a8-6c931e272f00. Возвращает экземпляр UUID.
- path - соответствует любой непустой строке, включая разделитель пути, '/'.
  Это позволяет вам сопоставлять полный путь URL, а не сегмент пути URL,
  как в случае с str.

URLconf выполняет поиск по запрошенному URL как в обычной строке Python.
Не включает параметры GET или POST или имя домена.
Например, в запросе на https://www.example.com/myapp/ URLconf будет искать myapp/.
URLconf не смотрит на метод запроса.

В любой момент urlpatterns могут «включать» другие модули URLconf.
По сути, это «корень» набора нижестоящих URL-адресов.
    urlpatterns = [
        # ... snip ...
        path('community/', include('aggregator.urls')),
        path('contact/', include('contact.urls')),
        # ... snip ...
    ]

Пример передачи параметров в URL:
    ...
    url(r'^users/(?P<user_id>\d+)/$', 'viewname', name='urlname')
    ...

    and FBV:

    def viewname(request, user_id):
        user = User.objects.get(id=user_id)
        #do something with this user

    or CBV:

    class SampleView(TemplateView):
        def get_context_data(self, **kwargs):
            user = User.objects.get(id=kwargs['user_id'])
            #do something with this user
