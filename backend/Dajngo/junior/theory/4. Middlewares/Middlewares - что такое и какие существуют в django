С точки зрения пользователя — Middleware (программное обеспечение
промежуточного слоя, связующее, межплатформенное ПО) — это словно мост,
связывающий между собой две части программы или системы.

В технических терминах — Django Middleware — это промежуточный слой между
запросом и ответом, это легкая, низкоуровневая система “плагинов” для
глобального изменения входных или выходных данных.

Каждый компонент промежуточного слоя отвечает за выполнение определенной функции.

Чтобы активировать компонент промежуточного ПО, нужно добавить его в список
MIDDLEWARE в настройках Django.
В MIDDLEWARE каждый компонент middleware представлен строкой: полный путь
Python к классу или имени функции фабрики middleware. Например, вот значение
по умолчанию, созданное django-admin startproject:
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

Порядок в MIDDLEWARE имеет значение, потому что промежуточная программа может
зависеть от других промежуточных программ.

Как работает Django Middleware
Когда пользователь инициирует запрос из приложения, создается обработчик WSGI,
выполняющий следующие действия по порядку:
1. Импорт модуля settings.py из корневой директории проекта.
2. Импорт классов исключений Django.
3. Загрузка всех классов связующего ПО, указанных в кортеже MIDDLEWARE из
   модуля settings.py.
4. Построение списка методов для обработки представлений, исключений,
   запросов и ответов.
5. Перебор методов запроса (request) по порядку.
6. Выдача прав доступа к запрошенному ресурсу по URL.
7. Обход каждого из методов обработки представлений (views) по порядку.
8. Вызов функции представления или метода dispatch() для представления-класса.
9. Обработка методов выброса исключений, если такие есть.
10. Обход каждого из методов ответа (response) в обратном порядке от обхода
    методов запроса.
11. Построение возвращаемого значения и выполнение функции обратного вызова
    (callback).

Django предоставляет два типа связующего программного обеспечения:
- Стандартные (встроенные) Middleware.
- Пользовательские Middleware.

Стандартное связующее ПО предоставляется по умолчанию, когда вы создаете свой
новый Django-проект; проверить список Middleware по умолчанию можно в модуле
settings.py из корневой директории проекта.

Пользовательское связующее ПО — это ваши собственные Middleware для использования
во всем проекте.

Алгоритм создания пользовательского Middleware:
- Создайте Python-пакет (папку с файлом __init__.py внутри) под названием
  middleware.
- В директории пакета создайте модуль под названием custom_middleware.py,
  определите обычную функцию либо класс.
- Теперь всё готово для создания ПО промежуточного слоя в форме функции или
  класса с вызываемыми экземплярами.
- Переходим в корневую директорию проекта и добавьте ваше новое пользовательское
  промежуточное ПО в список MIDDLEWARE из модуля settings.py

Специальные методы Django Middleware на основе классов:
- process_request:
  когда Django проходит через метод process_request в каждом из Middleware,
  то с помощью константы ROOT_URLCONF , указанной в settings.py, создаётся объект
  запроса. После обхода всех связующих ПО по очереди сверху вниз, Django решает,
  какое из представлений вызвать непосредственно следом за созданием объекта
  запроса.
- process_view(request, view_func, view_args, view_kwargs):
  рассмотрим формальные параметры, где request — это объект-экземпляр
  HttpRequest, а view_func — это функция, которая вызывается непосредственно
  перед представлением.
- process_response:
  данный метод составляет ответ, объект-экземпляр класса HttpResponse —
  конечный результат, получаемый после выполнения process_responseв каждом из
  связующих ПО.
- process_template_response(request, response):
  среди формальных параметров request — это объект-экземпляр класса
  HttpRequest, а response — это объект-экземпляр класса TemplateResponse
  (или эквивалент), ранее возвращенный представлением Django или другим
  связующим ПО.
- process_exception(request, exception):
  данный метод вызывается, когда представление выбрасывает исключение;
  обратите внимание на формальные параметры, где request — это объект-экземпляр
  класса HttpRequest, а exception — это объект-экземпляр класса Exception,
  выброшенный функцией или методом представления.
