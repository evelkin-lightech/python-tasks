Аутентификация — процедура проверки подлинности,
например: проверка подлинности пользователя путём сравнения введённого им
пароля (для указанного логина) с паролем, сохранённым в базе данных
пользовательских логинов.

Авторизация — предоставление определённому лицу или группе лиц прав
на выполнение определённых действий; а также процесс проверки (подтверждения)
данных прав при попытке выполнения этих действий.

OAuth 2.0 — протокол авторизации, позволяющий выдать одному сервису
(приложению) права на доступ к ресурсам пользователя на другом сервисе.

Протокол избавляет от необходимости доверять приложению логин и пароль,
а также позволяет выдавать ограниченный набор прав, а не все сразу.

Отличие OpenID от OAuth:
- OpenID предназначен для аутентификации — то есть для того, чтобы понять,
  что этот конкретный пользователь является тем, кем представляется
- OAuth является протоколом авторизации, то есть позволяет выдать права на
  действия

Использование OAuth возможно на любой платформе с доступом к интернету и
браузеру: на сайтах, в мобильных и desktop-приложениях, плагинах для браузеров

Отличие OAuth 1 от OAuth 2:
- Ключевое отличие простота: в новой версии нет громоздких схем подписи,
  сокращено количество запросов, необходимых для авторизации

Общая схема работы приложения, использующего OAuth:
- получение авторизации
- обращение к защищенным ресурсам

Результатом авторизации является access token — некий ключ,
предъявление которого является пропуском к защищенным ресурсам.
Обращение к ним в самом простом случае происходит по HTTPS с указанием в
заголовках или в качестве одного из параметров полученного access token'а.

Авторизация для приложений, имеющих серверную часть:
1. Редирект на страницу авторизации
2. На странице авторизации у пользователя запрашивается подтверждение выдачи прав
3. В случае согласия пользователя, браузер редиректится на URL,
   указанный при открытии страницы авторизации, с добавлением в GET-параметры
   специального ключа — authorization code
4. Сервер приложения выполняет POST-запрос с полученным authorization code
   в качестве параметра. В результате этого запроса возвращается access token
Это самый сложный вариант авторизации, но только он позволяет сервису однозначно
установить приложение, обращающееся за авторизацией (это происходит при
коммуникации между серверами на последнем шаге). Во всех остальных вариантах
авторизация происходит полностью на клиенте и по понятным причинам возможна
маскировка одного приложения под другое. Это стоит учитывать при внедрении
OAuth-аутентификации в API сервисов.

client_id и client_secret — значения, полученные при регистрации приложения
на платформе.

Авторизация по логину и паролю
Авторизация по логину и паролю представляет простой POST-запрос,
в результате которого возвращается access token. Такая схема не представляет
из себя ничего нового, но вставлена в стандарт для общности и рекомендуется
к применению только, когда другие варианты авторизации не доступны.

Безопасность OAuth 2.0 во многом основана на SSL. Это сильно упрощает жизнь
разработчикам, но требует дополнительных вычислительных ресурсов и
администрирования. Это может быть существенным вопросом в высоко нагруженных
проектах.

Общая схема OAuth 2.0:
1. Клиент запрашивает авторизацию у владельца ресурса.
2. Клиент получает грант авторизации.
3. Клиент запрашивает токен доступа путем аутентификации с помощью сервера
   авторизации и предоставление гранта авторизации.
4. Сервер авторизации аутентифицирует клиента, проверяя грант авторизации и,
   если он действителен, выдает токен доступа (access token) и рефреш токен
   (refresh token).
5. Клиент запрашивает защищенный ресурс у провайдера и аутентифицируется,
   представляя токен доступа.
6. Провайдер проверяет токен доступа и, если он действителен, обслуживает запрос.
