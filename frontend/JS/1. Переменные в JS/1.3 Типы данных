Есть восемь основных типов данных в JavaScript.

Т.к. JS - это динамически типизированный язык программирования,
то переменные в JavaScript могут содержать любые данные.
В один момент там может быть строка, а в другой – число:
    let message = "hello";
    message = 123456;

1. Число
Числовой тип данных (number) представляет как целочисленные значения,
так и числа с плавающей точкой.
Кроме обычных чисел, существуют так называемые «специальные числовые значения»,
которые относятся к этому типу данных: Infinity, -Infinity и NaN.
    - Infinity/-Infinity представляет собой математическую бесконечность.
      Это особое значение, которое больше любого числа:
        alert( 1 / 0 ); // Infinity
        alert( Infinity ); // Infinity
    - NaN означает вычислительную ошибку. Это результат неправильной
      или неопределённой математической операции, например:
        alert( "не число" / 2 ); // NaN
        alert( "не число" / 2 + 5 ); // NaN

2. BigInt
В JavaScript тип «number» не может содержать числа больше или меньше определнных
значений. Это техническое ограничение вызвано их внутренним представлением.
Для большинства случаев этого достаточно. Но иногда нужны действительно
гигантские числа, например, в криптографии или при использовании метки
времени («timestamp») с микросекундами.
Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать
с целыми числами произвольной длины.
Чтобы создать значение типа BigInt, необходимо добавить n в конец числового
литерала:
    const bigInt = 1234567890123456789012345678901234567890n;

3. Строка
Строка (string) в JavaScript должна быть заключена в кавычки.
    let str = "Привет";
    let str2 = 'Одинарные кавычки тоже подойдут';
    let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

4. Булевый (логический) тип
Булевый тип (boolean) может принимать только два значения:
true (истина) и false (ложь).
    let nameFieldChecked = true; // да, поле отмечено
    let ageFieldChecked = false; // нет, поле не отмечено
Булевые значения также могут быть результатом сравнений:
    let isGreater = 4 > 1;

5. Значение «null»
Это специальное значение null. Оно не относится ни к одному из типов.
Оно формирует отдельный тип, который содержит только значение null:
    let age = null;
В JavaScript null не является «ссылкой на несуществующий объект» или
«нулевым указателем», как в некоторых других языках.
Это просто специальное значение, которое представляет собой «ничего»,
«пусто» или «значение неизвестно».

6. Значение «undefined»
Специальное значение undefined также стоит особняком.
Оно формирует тип из самого себя так же, как и null.
Оно означает, что «значение не было присвоено».
Если переменная объявлена, но ей не присвоено никакого значения,
то её значением будет undefined:
    let age;
    alert(age); // выведет "undefined"

7. Объекты (object)
Тип object (объект) – особенный.
Все остальные типы называются «примитивными», потому что их значениями могут
быть только простые значения (будь то строка, или число, или что-то ещё).
В объектах же хранят коллекции данных или более сложные структуры.
    let user = {
        name: "John",
        age: 30
    };

8.Символ (symbol)
Тип symbol (символ) используется для создания уникальных идентификаторов
в объектах.
    var id = Symbol();
    var id = Symbol("id");
Символы гарантированно уникальны. Даже если мы создадим множество символов
с одинаковым описанием, это всё равно будут разные символы.
Описание – это просто метка, которая ни на что не влияет.
    let id1 = Symbol("id");
    let id2 = Symbol("id");
    alert(id1 == id2); // false

Чтобы узнать тип переменной используется оператор typeof.
У него есть две синтаксические формы:
- Синтаксис оператора: typeof x.
- Синтаксис функции: typeof(x).

Дополнительные типы данных о которых стоит упомянуть:
1. Массивы (Array)
Это структура данных, которая предназначена для хранения упорядоченной коллекции
данных. Существует 2 варианта синтаксиса для создания пустого массива:
    let arr = new Array();
    let arr = [];
Элементы массива нумеруются, начиная с нуля.
В качестве ключа – числовой индекс.
В массиве могут храниться элементы любого типа.

Очередь – один из самых распространённых вариантов применения массива.
Очередь — абстрактный тип данных с дисциплиной доступа к элементам
«первый пришёл — первый вышел»

- push добавляет элемент в конец.
- shift удаляет элемент в начале, сдвигая очередь,
  так что второй элемент становится первым.
- unshift - добавляет элемент в начало массива

Существует и другой вариант применения для массивов – структура данных,
называемая стек.

Она поддерживает два вида операций:
- push добавляет элемент в конец.
- pop удаляет последний элемент.

2. Map и Set
Map – это коллекция ключ/значение, как и Object.
Но основное отличие в том, что Map позволяет использовать ключи любого типа.

Методы и свойства:
- new Map() – создаёт коллекцию.
- map.set(key, value) – записывает по ключу key значение value.
- map.get(key) – возвращает значение по ключу или undefined,
  если ключ key отсутствует.
- map.has(key) – возвращает true, если ключ key присутствует в коллекции,
  иначе false.
- map.delete(key) – удаляет элемент по ключу key.
- map.clear() – очищает коллекцию от всех элементов.
- map.size – возвращает текущее количество элементов.

Map может использовать объекты в качестве ключей.

Set – это особый вид коллекции: «множество» значений (без ключей),
где каждое значение может появляться только один раз.





