JavaScript часто описывают как язык прототипного наследования —
каждый объект, имеет объект-прототип, который выступает как шаблон,
от которого объект наследует методы и свойства. Объект-прототип так же может
иметь свой прототип и наследовать его свойства и методы и так далее.
Это часто называется цепочкой прототипов и объясняет почему одним объектам
доступны свойства и методы которые определены в других объектах.

Прототипы - это механизм, с помощью которого объекты JavaScript наследуют
свойства друг от друга.

В JavaScript создаётся связь между экземпляром объекта и его прототипом
(свойство __proto__ является ссылкой на прототип объекта),
а свойства и методы обнаруживаются при переходе по цепочке прототипов.

    const person = {
        name: 'Sam',
        age: 28,
        greet: function() {
            console.log('Greet!')
        }
    }

    person.greet(); // 'Greet!'
    person.say(); // получим ошибку
    person.toString(); // '[object Object]'

Почему так происходит?

Так работают прототипы. У прототипа объекта person есть метод toString(),
поэтому ошибку мы не получим при ее вызове.

При создании какого-либо класса/объекта помимо параметров нам в объект
попадает прототип  самого главно класса в JS, т е Object(). У этого класса
есть свои определенные методы, которые наследуются при создании новых классов.

Модифицируем код:
    Object.prototype.say = function () {
        console.log('Say!');
    }
Теперь при попытке person.say(); мы получим вывод в косоль 'Say!'.

Создадим новый объект:
    const sam = Object.create(person);
Мы создали новый объект, прототипом которого указали объект person.
Теперь объект sam будет обладать всеми свойствами указанного прототипа, при этом
не имея своих собственных свойств:
    sam // выведет {}

